{"version":3,"file":"scroll.js","sources":["../../../node_modules/.pnpm/element-plus@2.3.6_vue@3.3.4/node_modules/element-plus/es/utils/dom/scroll.mjs"],"sourcesContent":["import '../browser.mjs';\nimport { getStyle } from './style.mjs';\nimport { isClient } from '@vueuse/core';\n\nconst isScroll = (el, isVertical) => {\n  if (!isClient)\n    return false;\n  const key = {\n    undefined: \"overflow\",\n    true: \"overflow-y\",\n    false: \"overflow-x\"\n  }[String(isVertical)];\n  const overflow = getStyle(el, key);\n  return [\"scroll\", \"auto\", \"overlay\"].some((s) => overflow.includes(s));\n};\nconst getScrollContainer = (el, isVertical) => {\n  if (!isClient)\n    return;\n  let parent = el;\n  while (parent) {\n    if ([window, document, document.documentElement].includes(parent))\n      return window;\n    if (isScroll(parent, isVertical))\n      return parent;\n    parent = parent.parentNode;\n  }\n  return parent;\n};\nlet scrollBarWidth;\nconst getScrollBarWidth = (namespace) => {\n  var _a;\n  if (!isClient)\n    return 0;\n  if (scrollBarWidth !== void 0)\n    return scrollBarWidth;\n  const outer = document.createElement(\"div\");\n  outer.className = `${namespace}-scrollbar__wrap`;\n  outer.style.visibility = \"hidden\";\n  outer.style.width = \"100px\";\n  outer.style.position = \"absolute\";\n  outer.style.top = \"-9999px\";\n  document.body.appendChild(outer);\n  const widthNoScroll = outer.offsetWidth;\n  outer.style.overflow = \"scroll\";\n  const inner = document.createElement(\"div\");\n  inner.style.width = \"100%\";\n  outer.appendChild(inner);\n  const widthWithScroll = inner.offsetWidth;\n  (_a = outer.parentNode) == null ? void 0 : _a.removeChild(outer);\n  scrollBarWidth = widthNoScroll - widthWithScroll;\n  return scrollBarWidth;\n};\nfunction scrollIntoView(container, selected) {\n  if (!isClient)\n    return;\n  if (!selected) {\n    container.scrollTop = 0;\n    return;\n  }\n  const offsetParents = [];\n  let pointer = selected.offsetParent;\n  while (pointer !== null && container !== pointer && container.contains(pointer)) {\n    offsetParents.push(pointer);\n    pointer = pointer.offsetParent;\n  }\n  const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);\n  const bottom = top + selected.offsetHeight;\n  const viewRectTop = container.scrollTop;\n  const viewRectBottom = viewRectTop + container.clientHeight;\n  if (top < viewRectTop) {\n    container.scrollTop = top;\n  } else if (bottom > viewRectBottom) {\n    container.scrollTop = bottom - container.clientHeight;\n  }\n}\n\nexport { getScrollBarWidth, getScrollContainer, isScroll, scrollIntoView };\n//# sourceMappingURL=scroll.mjs.map\n"],"names":["scrollBarWidth","getScrollBarWidth","namespace","_a","isClient","outer","widthNoScroll","inner","widthWithScroll","scrollIntoView","container","selected","offsetParents","pointer","top","prev","curr","bottom","viewRectTop","viewRectBottom"],"mappings":"gCA4BA,IAAIA,EACC,MAACC,EAAqBC,GAAc,CACvC,IAAIC,EACJ,GAAI,CAACC,EACH,MAAO,GACT,GAAIJ,IAAmB,OACrB,OAAOA,EACT,MAAMK,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAY,GAAGH,oBACrBG,EAAM,MAAM,WAAa,SACzBA,EAAM,MAAM,MAAQ,QACpBA,EAAM,MAAM,SAAW,WACvBA,EAAM,MAAM,IAAM,UAClB,SAAS,KAAK,YAAYA,CAAK,EAC/B,MAAMC,EAAgBD,EAAM,YAC5BA,EAAM,MAAM,SAAW,SACvB,MAAME,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,MAAM,MAAQ,OACpBF,EAAM,YAAYE,CAAK,EACvB,MAAMC,EAAkBD,EAAM,YAC9B,OAACJ,EAAKE,EAAM,aAAe,MAAgBF,EAAG,YAAYE,CAAK,EAC/DL,EAAiBM,EAAgBE,EAC1BR,CACT,EACA,SAASS,EAAeC,EAAWC,EAAU,CAC3C,GAAI,CAACP,EACH,OACF,GAAI,CAACO,EAAU,CACbD,EAAU,UAAY,EACtB,OAEF,MAAME,EAAgB,CAAA,EACtB,IAAIC,EAAUF,EAAS,aACvB,KAAOE,IAAY,MAAQH,IAAcG,GAAWH,EAAU,SAASG,CAAO,GAC5ED,EAAc,KAAKC,CAAO,EAC1BA,EAAUA,EAAQ,aAEpB,MAAMC,EAAMH,EAAS,UAAYC,EAAc,OAAO,CAACG,EAAMC,IAASD,EAAOC,EAAK,UAAW,CAAC,EACxFC,EAASH,EAAMH,EAAS,aACxBO,EAAcR,EAAU,UACxBS,EAAiBD,EAAcR,EAAU,aAC3CI,EAAMI,EACRR,EAAU,UAAYI,EACbG,EAASE,IAClBT,EAAU,UAAYO,EAASP,EAAU,aAE7C","x_google_ignoreList":[0]}